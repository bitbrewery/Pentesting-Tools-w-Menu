import socket

def grab_banner():
 while True:
    # Prompt the user for the IP address
    ip_address = input("Enter the IP address: ")

    # Prompt the user for the port range
    port_range = input("Enter the port range (e.g., 80, 443, 8000-8080): ")

    # Prompt the user for the timeout setting
    timeout = float(input("Enter the timeout setting (seconds): "))

    # Ask the user if they'd like to check for vulnerabilities
    check_vulns = input("Do you want to check for vulnerabilities? (yes/no): ")
    if check_vulns.lower() == "yes":
        # Prompt the user for the path to the file with vulnerable services
        vul_file = input("Enter the path to the file with vulnerable services: ")
    else:
        vul_file = None

    # Parse the port range
    ports = []
    ranges = port_range.split(",")
    for r in ranges:
        if "-" in r:
            start, end = map(int, r.split("-"))
            ports.extend(range(start, end + 1))
        else:
            ports.append(int(r))

    # Scan each port
    for port in ports:
        try:
            # Create a new socket object
            s = socket.socket()

            # Set a timeout on the socket
            s.settimeout(timeout) # Timeout after user-specified seconds

            # Try to connect to the remote server
            try:
              s.connect((ip_address, port))
            except socket.timeout:
              print(f"Connection to {ip_address}:{port} timed out after {timeout} seconds.")
              continue

            # Receive the server's response
            banner = s.recv(1024)

            # Close the connection
            s.close()

            # Print the banner
            print(f"{ip_address}:{port} - {banner.decode().strip()}")

            # Check the banner for potential vulnerabilities if requested
            if vul_file is not None:
                with open(vul_file, 'r') as file:
                  for line in file.readlines():
                      if line.strip() in banner.decode().strip():
                          print(f"Potential vulnerability detected on {ip_address}:{port}: {line.strip()} is running.")
        except Exception as e:
            print(f"Could not connect to {ip_address}:{port} - {str(e)}")

    # Ask the user if they'd like to scan again
    again = input("Do you want to scan again? (yes/no): ")
    if again.lower() != "yes":
        break
