import itertools
import string
import hashlib
import time
import concurrent.futures


def brute_force_crack():
    # Map numbers to hashing algorithms
    hash_algorithms = {
        "MD5": hashlib.md5,
        "SHA1": hashlib.sha1,
        "SHA256": hashlib.sha256,
        "SHA512": hashlib.sha512,
    }

    # Prompt the user to enter the target hash
    target_hash = input("Enter the target hash: ")

    # Prompt the user to select the hashing algorithm
    print("Select the hash type:")
    print("1. MD5")
    print("2. SHA1")
    print("3. SHA256")
    print("4. SHA512")
    hash_algorithm = input("Enter the number corresponding to the hash type: ")
    if hash_algorithm == "1":
        hash_algorithm = "MD5"
    elif hash_algorithm == "2":
        hash_algorithm = "SHA1"
    elif hash_algorithm == "3":
        hash_algorithm = "SHA256"
    elif hash_algorithm == "4":
        hash_algorithm = "SHA512"
    else:
        print("Invalid hash type. Defaulting to SHA256.")
        hash_algorithm = "SHA256"

    # Get the hashing function from the map
    hasher = hash_algorithms[hash_algorithm]

    # Shared variable
    attempts = 0

    def try_password(guess):
        nonlocal attempts
        attempts += 1
        print(f"[+] Attempt {attempts}: {guess}")
        if hasher(guess.encode()).hexdigest() == target_hash:
            return guess
        return None

    chars = string.ascii_lowercase + string.digits
    start_time = time.time()
    with concurrent.futures.ThreadPoolExecutor() as executor:
        for password_length in range(1, 9):
            for guess in itertools.product(chars, repeat=password_length):
                guess = "".join(guess)
                future = executor.submit(try_password, guess)
                if future.result() is not None:
                    end_time = time.time()
                    elapsed_time = end_time - start_time
                    print(
                        f"Password found: {guess}, found in {attempts} guesses in {elapsed_time} seconds."
                    )
                    return
    end_time = time.time()
    elapsed_time = end_time - start_time
    print(f"Password not found after {attempts} guesses in {elapsed_time} seconds.")
